#!/usr/bin/perl -w
use strict;
use warnings;
use utf8;
use FindBin;
use lib ("$FindBin::Bin/../lib", "$FindBin::Bin/../extlib");
use Getopt::Long;
use MT::Bootstrap;
use MT;
use MT::PluginData;
binmode STDOUT, ":utf8";
binmode STDERR, ":utf8";

GetOptions(
    'd|delete' => \my ($delete),
    'v|verbose' => \my ($verbose),
    "help|?"   => sub { usage(); exit },
);

my $mt = MT->new;

my $pd_plugins = pd_plugins();
my $installed  = installed_plugins();

for my $pname (keys %$pd_plugins) {

    if ($verbose) {
        print "============================================================\n";
        printf("Checking Plugin Data for %s\n", $pname);
        print "============================================================\n";
    }

    my $plugin = $installed->{$pname} || MT::Plugin->new({ id => $pname, name => $pname });
    my $found;

    while (my ($key, $count) = each(%{ $pd_plugins->{$pname} })) {
        my $scope_id  = ($key =~ qr{^configuration:?(.*)})[0] || '';
        my $cfg       = $plugin->get_config_obj($scope_id);
        my $active_id = $cfg->id || next;                              # never reach next

        if ($count > 1) {
            printf(qq{%s Duplication for key "%s" is found.\n}, $count, $key);
            $found = 1;
            if ($delete) {
                MT::PluginData->remove(
                    { plugin  => $pname, key => $key, id => { not => $active_id } },
                    { nofetch => 1 });
                MT->log({
                    message => MT->translate('Duplications of plugin data(ID:%d) for "[_1]" are deleted', $active_id, $pname),
                    level   => MT::Log::INFO(),
                });
            }
        }

        if (ref $cfg->data ne 'HASH') {
            printf(qq{Data breakage for id %d key "%s" is found.\n}, $active_id, $key);
            $found = 1;
            if ($delete) {
                $cfg->remove;
                MT->log({
                    message => MT->translate('Plugin data(ID:%d) for "[_1]" is deleted due to data breakage.', $active_id, $pname),
                    level   => MT::Log::INFO(),
                });
            }
        }
    }

    printf("No data breakages nor duplications found.\n") unless $found;
}

sub installed_plugins {
    my $plugins;
    for my $k (keys %MT::Plugins) {
        if (my $p = $MT::Plugins{$k}->{object}) {
            $plugins->{ $p->key || $p->name } = $p;
        }
    }
    return $plugins;
}

sub pd_plugins {
    my $plugins = {};
    my $iter    = MT::PluginData->count_group_by(undef, { group => ['plugin', 'key'] });
    while (my ($count, $plugin, $key) = $iter->()) {
        $plugins->{$plugin} ||= {};
        $plugins->{$plugin}->{$key} = $count;
    }
    return $plugins;
}

sub usage {
    print STDERR << "EOT";
usage: $0

These options are available:

-d, --delete    Delete on detecting data breakage or duplication.
-v, --verbose    Verbose output.
EOT
}
