<div class="group-container multi_line_text-field-container content-field" <mt:var name="required">>
<div class="form-group">
  <div class="row no-gutters align-items-center">
    <div class="col">
      <ul class="nav nav-tabs d-flex mb-3" role="tablist" id=blockeidor_menus-<mt:var name="content_field_id">>
        <mt:if name="options{label}"><li class="mr-auto"><label for="contentblock1"><mt:var name="options{label}" escape="html"><mt:if name=options{required}> <span class="badge badge-danger"><__trans phrase="Required"></span></mt:if></label></li></mt:if>
        <li class="nav-item" <mt:if name="convert_breaks" ne="blockeditor">hidden</mt:if>><a class="nav-link active" href="#prev"><__trans phrase="Preview"></a></li>
        <li class="nav-item" <mt:if name="convert_breaks" ne="blockeditor">hidden</mt:if>><a class="nav-link" href="#sort"><__trans phrase="Sort"></a></li>
      </ul>
    </div>
  </div>
  <div class="mt-contentblock" id="contentblock<mt:var name="content_field_id">">
    <div class="form-group mb-4">
      <label for="formGroup-<mt:var name="content_field_id">"><__trans phrase="Format:"></label>
      <select name="content-field-<mt:var name="content_field_id">_convert_breaks" class="custom-select form-control convert_breaks" id="formGroup-<mt:var name="content_field_id">" data-target="editor-input-content-field-<mt:var name="content_field_id">" data-orig_text_format="<$mt:var name="convert_breaks"$>" mt:watch-change="1" mt:raw-name="1">
      <mt:loop name="text_filters">
        <mt:if name="filter_key" eq="richtext">
          <option class="d-none d-md-block" value="<$mt:var name="filter_key"$>"<mt:if name="convert_breaks" eq="$filter_key"$> selected="selected"</mt:if>><$mt:var name="filter_label" escape="html"$></option>
          <option class="d-md-none" value="_richtext"><__trans phrase="Rich Text(HTML mode)"></option>
        <mt:else>
        <option value="<$mt:var name="filter_key"$>"<mt:if name="convert_breaks" eq="$filter_key"$> selected="selected"</mt:if>><$mt:var name="filter_label" escape="html"$></option>
        </mt:if>
      </mt:loop>
      </select>
    </div>

    <mt:ignore>editor-content</mt:ignore>
    <mt:unless name="editors">
    <mt:include name="include/editor_multi.tmpl">
    <mt:else>
    <div class="editor-content<mt:if name="convert_breaks" ne="richtext"> editor-plaintext</mt:if>">
      <textarea id="editor-input-content-field-<mt:var name="content_field_id">"  name="content-field-<mt:var name="content_field_id">" class="form-control text high content-field editorfield group" mt:raw-name="1" <mt:if name="options{required}">required</mt:if>><mt:var name="value" escape="html"></textarea>
    </div>
    </mt:unless>

    <mt:ignore>blockeditor-content</mt:ignore>
    <div id="editor-input-content-field-<mt:var name="content_field_id">-blockeditor" class="blockeditor sortable" data-blockeditor-field_id="<mt:var name="content_field_id">" hidden>
      <p class="text-center mb-0" hidden><__trans phrase="No block in this field."></p>
    </div>
    <div id="blockeditor_add-<mt:var name="content_field_id">" class="pt-3" hidden>
      <a href="javascript:void(0)" class="mt-contentblock__add"><svg title="追加" role="img" class="mt-icon"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="<$mt:var name="static_uri"$>images/sprite.svg#ic_add"></use></svg></a>
    </div>
  </div>
</div>
</div>
<mt:unless name="loaded_multi_line_text_field">
  <mt:var name="loaded_multi_line_text_field" value="1">

<input type="hidden" name="block_editor_data" id="block_editor_data" value="">

<div class="modal modal-blockeditor" role="dialog" aria-labelledby="exampleModal" aria-hidden="true" >
 <div class="modal-dialog modal-lg" role="document">
   <div class="modal-content">
     <div class="modal-header">
       <h4 class="modal-title"></h4>
       <button type="button" class="close" data-dismiss="modal" aria-label="Close">
         <span aria-hidden="true">&times;</span>
       </button>
     </div>
     <div class="modal-body">
     </div>
     <div class="modal-body options d-none">
     </div>
     <div class="modal-footer">
     </div>
   </div>
 </div>
</div>

  <mt:setvarblock name="js_include" append="1">
    <script src="<$mt:var name="static_uri"$>plugins/BlockEditor/lib/js/jquery.blockeditor.js?v=<mt:var name="mt_version_id" escape="url">"></script>
    <script src="<$mt:var name="static_uri"$>plugins/BlockEditor/lib/js/blockeditor_field_manager.js?v=<mt:var name="mt_version_id" escape="url">"></script>
    <script src="<$mt:var name="static_uri"$>plugins/BlockEditor/lib/js/blockeditor_field.js?v=<mt:var name="mt_version_id" escape="url">"></script>
    <script src="<$mt:var name="static_uri"$>plugins/BlockEditor/lib/js/modal_window.js?v=<mt:var name="mt_version_id" escape="url">"></script>

    <mt:loop name="blockeditor_fields">
    <script src="<mt:if name="path"><$mt:var name="static_uri"$><$mt:var name="path"$><mt:else><$mt:var name="static_uri"$>plugins/BlockEditor/lib/js/fields/<$mt:var name="type"$>.js</mt:if>?v=<mt:var name="mt_version_id" escape="url">"></script>
    </mt:loop>
  </mt:setvarblock>

  <mt:setvarblock name="css_include" append="1">
    <link rel="stylesheet" href="<$mt:var name="static_uri"$>plugins/BlockEditor/css/blockeditor.css?v=<mt:var name="mt_version_id" escape="url">" type="text/css" />
    <style type="text/css">
.multi_line_text-field-container select.convert_breaks {
  width: 100%;
}
@media (min-width: 768px) {
  .multi_line_text-field-container select.convert_breaks {
    width: 50%;
  }
}

.multi_line_text-field-container .blockeditor.sortable .placeholder {
    border: 1px dashed #c0c6c9;
    background-color: #fbfbfb;
    margin-bottom: 2px;
    padding: 0.5rem 0;
}

div.group-container.multi_line_text-field-container>.form-group {
    margin-bottom: 0px !important;
}
    </style>
  </mt:setvarblock>

  <mt:setvarblock name="jq_js_include" append="1">
  <mt:if name="editors">
  // editor load
  var editor_strategy = MT.App.EditorStrategy.Multi;
  editor_strategy.prototype.create = function(app, ids, format) {
    jQuery('.editorfield').each(function(i) {
      ids.push(this.id);
    });
    app.editors = {};
    jQuery.each(ids, function() {
        jQuery('#' + this).show();
        var format = jQuery('.convert_breaks[data-target='+this+']').val();
        app.editors[this] = new MT.EditorManager(this, {
            format: format,
            wrap: true
        });

        var setFormat = app.editors[this]['setFormat'];
        app.editors[this]['setFormat'] = function(format) {
            jQuery.each(app.editors, function() {
                setFormat.apply(this, [format]);
            });
        };
    });
  }
  editor_strategy.prototype._setWithHeight = function(app, id, height){
      jQuery(app.editorIds).each(function() {
          if (id == this) {
              app.editors[this].show();
              app.editor = app.editors[this];
              if (height) {
                  app.editor.setHeight(height);
              }
          }
      });
  }
  </mt:if>
  var block_editor_data_json = '<mt:var name="block_editor_data" encode_js="1">';
  var blockeditor_data  = {};
  <mt:if name="block_editor_data">if(block_editor_data_json){
    try {
      blockeditor_data = JSON.parse(block_editor_data_json);
    } catch(e){
      console.error(e.message);
    }
  }</mt:if>



  jQuery(function(){
    jQuery('.convert_breaks :selected[value=blockeditor]').each(function(){
      var target_id = jQuery(this).parent().attr('data-target');
      var target_data = {};
      var editor_id = target_id+'-blockeditor';
      if( editor_id + '' in blockeditor_data ){
        target_data = blockeditor_data[editor_id];
      }
      jQuery('#' + editor_id).blockeditor(target_data);
      <mt:unless name="editors">
      jQuery('#' + target_id).hide();
      <mt:else>
      jQuery('#' + target_id).parents('.editor-content').hide();
      </mt:unless>
      var field_id = target_id.replace(/editor-input-content-field-/,'');
      jQuery('#blockeidor_menus-' + field_id + ' .nav-item').removeAttr('hidden');
      jQuery('#editor-input-content-field-' + field_id + '-blockeditor').removeAttr('hidden');
    })
  });

  function generate_unique_id(){
    return new Date().getTime().toString(16)  + Math.floor(Math.random()*9999).toString(16)
  }
  function convertedText(response) {
      if (response.error) {
          alert("Error: " + response.error);
          return;
      }

      var field_id = response.result.field;
      <mt:unless name="editors">
      jQuery('#' + field_id + '-content').val(response.result[field_id]);
      jQuery('.convert_breaks[data-target='+field_id+']').attr('data-orig_text_format', 'richtext');
      jQuery('#'+field_id).removeClass('editor-plaintext');
      app.setEditorIframeHTML(field_id);
      <mt:else>
      jQuery('#'+field_id).val(response.result[field_id]);
      jQuery('.convert_breaks[data-target='+field_id+']').attr('data-orig_text_format', 'richtext');
      jQuery('#'+field_id).parents('.editor-content').removeClass('editor-plaintext').show();
      app.editor.reload();
      </mt:unless>
  }
  function changedTextFormat(e, noConfirm) {
      var editor_id = jQuery(this).data('target');
      var form = this.form;
      var option = this.options[this.selectedIndex].value;
      var field_id = editor_id.replace(/editor-input-content-field-/,'');
      var editor_name = editor_id.replace(/editor-input-/, '');
      app.setEditor(editor_name);
      // app.initEditor();

      var cur_text_format = jQuery(this).attr('data-orig_text_format');
      if ((cur_text_format != 'richtext') && (option == 'richtext') && !noConfirm) {
          // warn user that changing to richtext is not reversible (easily)
          if (!confirm("<__trans phrase="Converting to rich text may result in changes to your current document." escape="js">")) {
              // revert selection
              for (var i = 0; i < this.options.length; i++) {
                  if (this.options[i].value == cur_text_format)
                      this.selectedIndex = i;
              }
              app.editor.focus();
              return;
          }
      }
      if ((cur_text_format == 'blockeditor') && (option != 'blockeditor')) {
          // warn user that changing to plaintext is not reversible (easily)
          if (!confirm("<__trans phrase="Changing to plain text is not possible to return to the block edit." escape="js">")) {
              // revert selection
              for (var i = 0; i < this.options.length; i++) {
                  if (this.options[i].value == cur_text_format)
                      this.selectedIndex = i;
              }
              app.editor.focus();
              return;
          }
      }

      if ((cur_text_format != 'blockeditor') && (option == 'blockeditor')) {
          // warn user that changing to plaintext is not reversible (easily)
          if (!confirm("<__trans phrase="Changing to block editor is not possible to result return to your current document." escape="js">")) {
              // revert selection
              for (var i = 0; i < this.options.length; i++) {
                  if (this.options[i].value == cur_text_format)
                      this.selectedIndex = i;
              }
              app.editor.focus();
              return;
          }
      }
      <mt:unless name="editors">
      if (cur_text_format == 'richtext' && option != 'blockeditor') {
          // changing to plaintext editor
          jQuery('#'+editor_id).addClass('editor-plaintext');

          app.editor.setMode('textarea');
          app.editor.focus();
      } else if(cur_text_format == 'blockeditor' && option != 'richtext') {
          // changing to plaintext editor
          jQuery('#'+editor_id).addClass('editor-plaintext');

          var html = jQuery('#'+editor_id + '-blockeditor').blockeditor('get_html');
          app.editor.reload();
          app.editor.setMode('textarea');
          app.editor.setHTML(html);
          jQuery('#' + editor_id + '-blockeditor').blockeditor('destroy');
          jQuery('#' + editor_id).parents('.editor-content').show();
          app.editor.focus();
      } else if (option == 'richtext') {
      <mt:else>
      if (cur_text_format == 'richtext' && option != 'blockeditor') {
          // changing to plaintext editor
          jQuery('#'+editor_id).parents('.editor-content').addClass('editor-plaintext');

          app.editor.reload();
          app.editor.setMode(option);
          app.editor.focus();
      } else if(cur_text_format == 'blockeditor' && option != 'richtext') {
          // changing to plaintext editor
          jQuery('#'+editor_id).parents('.editor-content').addClass('editor-plaintext');

          var html = jQuery('#'+editor_id + '-blockeditor').blockeditor('get_html');
          app.editor.reload();
          app.editor.setMode(option);
          app.editor.setContent(html);
          jQuery('#' + editor_id + '-blockeditor').blockeditor('destroy');
          jQuery('#' + editor_id).parents('.editor-content').show();
          app.editor.focus();
      } else if (option == 'richtext') {
      </mt:unless>
          app.saveHTML(false);
          // changing to richtext editor
          // convert existing format to richtext
          var param = {
              '__mode':     'data_convert_to_html',
              'format':     cur_text_format,
              'field':      editor_id,
              'editor_id':  jQuery('#'+editor_id).val()
          };
          if( cur_text_format == 'blockeditor' ){
              param[editor_id] = jQuery('#' + editor_id + '-blockeditor').blockeditor('get_html');
              jQuery('#' + editor_id + '-blockeditor').blockeditor('destroy');
          } else {
              <mt:unless name="editors">
              param[editor_id] = jQuery('#'+editor_id + '-content').val();
              <mt:else>
              param[editor_id] = jQuery('#'+editor_id).val();
              </mt:unless>
          }
          jQuery.ajax({
            uri:    '<mt:var name="script_url">',
            type:   'POST',
            data:   param,
          })
          .done(function(data){
            convertedText(data);
          });
      } else {
          <mt:if name="editors">app.editor.setMode(option);</mt:if>
          app.editor.focus();
          if(option == "blockeditor"){
            var blockeditor_id = editor_id+'-blockeditor';
            jQuery('#' + blockeditor_id).blockeditor({});
            <mt:unless name="editors">
            jQuery('#' + editor_id).hide();
            <mt:else>
            jQuery('#' + editor_id).parents('.editor-content').hide();
            </mt:unless>
          }
      }
      if(option == 'blockeditor'){
        jQuery('#blockeidor_menus-' + field_id + ' .nav-item').removeAttr('hidden');
        jQuery('#editor-input-content-field-' + field_id + '-blockeditor').removeAttr('hidden');
      } else {
        jQuery('#blockeidor_menus-' + field_id + ' .nav-item').attr('hidden','');
        jQuery('#editor-input-content-field-' + field_id + '-blockeditor').attr('hidden', '');
        jQuery('#blockeditor_add-' + field_id).attr('hidden', '');
        <mt:unless name="editors">
        jQuery('#' + editor_id).show();
        <mt:else>
        jQuery('#' + editor_id).parents('.editor-content').show();
        </mt:unless>
      }
      jQuery('.convert_breaks[data-target='+editor_id+']').attr('data-orig_text_format', option);
  }

  jQuery(document).on('change', '.convert_breaks', changedTextFormat);

;(function(){
  jQuery(window).on('pre_autosave', function() {
    var $form = jQuery('#edit-content-type-data-form');
    resetMultiLineTextData($form);
    setMultiLineTextData($form);
  });
})();
jQuery.mtValidateAddRules({
  'div.multi_line_text-field-container': function ($e) {
    var required = $e.data('mt-required') ? true : false;
    var format = $e.find('.convert_breaks').val();
    var editor_id = $e.find('.convert_breaks').data('target');
    var data = false;
    if(format == 'blockeditor'){
      var obj = jQuery('#'+editor_id+'-blockeditor').blockeditor('get_data');
      data = Object.keys(obj).length > 0 ? true : false;
    } else {
      <mt:unless name="editors">
      var content = app.editors[editor_id].getHTML();
      <mt:else>
      var content = app.editors[editor_id].getContent();
      </mt:unless>
      data = content != '' ? true : false;
    }
    if ( required && !data ) {
        this.error = true;
        this.errstr = trans('This field is required');
        return false;
    }
    return true;
  }
});

function resetMultiLineTextData($form) {
  $form.find("textarea[name^=content-field-multi-]").remove();
}
function setMultiLineTextData($form) {
  var fieldId, m;
  $form.find('textarea[name^=content-field-]').each(function () {
    m = this.name.match(/-(\d+)$/);
    if (m) {
      fieldId = m[1];
      $form.append(jQuery('<textarea hidden style="display:none;" name="content-field-multi-' + fieldId + '" mt:raw-name="1"></textarea>'));
      $form.find('textarea[name=content-field-multi-' + fieldId + ']').val(this.value);
    }
  });
}

jQuery(window).on('load change_to_mobile_view change_to_pc_view', function () {
  var isMobileView = MT.Util.isMobileView();
  jQuery('.multi_line_text-field-container select.convert_breaks').each(function (index, element) {
    var $formats = jQuery(element);
    var selectedFormat = $formats.find('option:selected').val();
    if (isMobileView) {
      $formats.find('option[value=richtext]').attr('disabled', 'disabled');
      $formats.find('option[value=_richtext]').removeAttr('disabled');
      if (selectedFormat != 'richtext') {
        return;
      }
      $formats.val('_richtext')
              .trigger('change', true);
    } else {
      $formats.find('option[value=richtext]').removeAttr('disabled');
      $formats.find('option[value=_richtext]').attr('disabled', 'disabled');
      if (selectedFormat != '_richtext') {
        return;
      }
      $formats.val('richtext')
              .trigger('change', true);
    }
  });
});

  </mt:setvarblock>
</mt:Unless>
