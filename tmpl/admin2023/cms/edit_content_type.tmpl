<mt:setvar name="edit_screen" value="1">
<mt:if name="new_object">
  <mt:setvar name="page_title" value="<__trans phrase="Create Content Type">">
<mt:else>
  <mt:setvar name="page_title" value="<__trans phrase="Edit Content Type">">
</mt:if>

<mt:setvarblock name="system_msg">
<div id="msg-block">
<mt:loop name="content_field_types">
  <mt:if name="warning">
    <mtapp:statusmsg
       class="warning"
       can_close="0">
      <mt:var name="warning">
    </mtapp:statusmsg>
  </mt:if>
</mt:loop>
  <mt:if name="saved">
    <mtapp:statusmsg
       id="saved"
       class="success">
      <__trans phrase="Contents type settings has been saved.">
    </mtapp:statusmsg>
  </mt:if>
  <mt:if name="error">
    <mtapp:statusmsg
       id="error"
       class="error"
       can_close="0">
      <mt:var name="error">
    </mtapp:statusmsg>
  </mt:if>
  <mt:if name="request.not_deleted">
    <mtapp:statusmsg
      id="not-deleted"
      class="error"
      can_close="0">
      <__trans phrase="Some content fields were not deleted. You need to delete archive mapping for the content field first.">
    </mtapp:statusmsg>
  </mt:if>
</div>
</mt:setvarblock>

<mt:setvarblock name="html_head" append="1">
<mt:stylesheet path="css/content-type.css">
<mt:unless name="config.useriot">
  <mt:ignore><!-- Moved from content-fields.tag, because this style tag did not work in ContentFields.svelte --></mt:ignore>
  <style>
    div.mt-draggable__area > div.placeholder {
      height: 26px;
      margin: 4px;
      margin-left: 10px;
      border-width: 2px;
      border-style: dashed;
      border-radius: 4px;
      border-color: #aaa;
    }
  </style>
</mt:unless>
</mt:setvarblock>

<mt:setvarblock name="js_include" append="1">
<mt:script type="text/javascript" path="js/cms.js">

<mt:ignore><!-- Do not indent the following lines to avoid Riot.js error. --></mt:ignore>
<mt:if name="config.useriot">
<mt:if name="options_htmls">
<script type="riot/tag">
<mt:loop name="options_htmls"><mt:var name="html">
</mt:loop>
</script>
</mt:if>

  <mt:if name="debug_riot">
    <mt:script type="riot/tag" path="js/ss/tag/ss.tag">
    <mt:script type="riot/tag" path="js/admin2023/contenttype/tag/content-fields.tag">
    <mt:script type="riot/tag" path="js/admin2023/contenttype/tag/content-field.tag">
    <mt:script type="text/javascript" path="riot/riot-compiler.js">
  <mt:else>
    <mt:script type="text/javascript" path="riot/riot-compiler.min.js">
    <mt:script type="text/javascript" path="js/ss/ss.js">
    <mt:script type="text/javascript" path="js/admin2023/contenttype/contenttype.js">
  </mt:if>
</mt:if>

<mt:unless name="config.useriot">
  <script
    id="script-contenttype"
    src="<mt:var name="static_uri">js/build/contenttype.js?v=<mt:var name="mt_version_id" escape="url">"
    data-config-number-field-max-value="<mt:var name="config.numberfieldmaxvalue" escape="html">"
    data-config-number-field-min-value="<mt:var name="config.numberfieldminvalue" escape="html">"
    data-config-number-field-decimal-places="<mt:var name="config.numberfielddecimalplaces" escape="html">"
    data-options-html-params="<mt:var name="options_html_params_json" escape="html">"
  >
  </script>

  <mt:if name="options_scripts">
    <mt:loop name="options_scripts">
      <mt:var name="script">
    </mt:loop>
  </mt:if>
</mt:unless>

<script>
  var content_field_types = JSON.parse('<mt:var name="content_field_types_json" escape="js">');
  var invalid_types = content_field_types.filter(function (field_type) {
    return field_type.warning;
  }).reduce(function (hash, field_type) {
    hash[field_type.type] = true;
    return hash;
  }, {});
  var fields = <mt:if name="fields">JSON.parse('<mt:var name="fields" escape="js">');<mt:else>[];</mt:if>
</script>
</mt:setvarblock>

<mt:setvarblock name="jq_js_include" append="1">
document.addEventListener('DOMContentLoaded', () => {
  jQuery('input[type="text"]').on('keyup', function() {
    setDirty(true);
  });
  jQuery('textarea').on('keyup', function() {
    setDirty(true);
  });
  jQuery('input[type="radio"]').on('change', function() {
    setDirty(true);
  });
  jQuery('input[type="checkbox"]').on('change', function() {
    setDirty(true);
  });
  jQuery('select').on('change', function() {
    setDirty(true);
  });

  // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12756142/
  jQuery(document).on('mouseup', '.content-field-block input, .content-field-block textarea', function () {
    jQuery(this).trigger('blur').trigger('focus');
  });

  jQuery.mtValidator('selection-field-values-option',
    jQuery.extend({}, jQuery.mtValidator('simple'), {
      showError: function ( $target, $error_block ) {
        $target.parent().append($error_block);
      },
    })
  );

  jQuery.mtValidator('content-field-block', {
    errorClass: 'border-danger',
    removeError: function () {},
    showError: function () {},
    updateError: function () {},
    wrapError: function () {}
  });

  jQuery.mtValidateAddRules({
    '.content-field-block': function ($e) {
      return $e.find('.has-error').length == 0;
    },

    '.date-field': function ($e) {
      if (!$e.val()) return true;
      return MT.Util.isValidDate($e.val() + ' 00:00:00');
    },

    '.time-field': function ($e) {
      if (!$e.val()) return true;
      return MT.Util.isValidDate('1970-01-01 ' + $e.val());
    },

    '.values-option-table': function ($e) {
      var hasNoValuesOption = $e.find('tbody tr').length == 0;
      if (hasNoValuesOption) {
        this.error = true;
        this.errstr = trans('1 or more label-value pairs are required');
        return false;
      }

      var hasInvalidValuesOption = $e.find('input[type=text].is-invalid').length > 0;
      if (hasInvalidValuesOption) {
        this.error = true;
        this.errstr = ' ';  // no error message
        return false;
      }

      return true;
    },

    '[data-mt-content-field-unique]': function ($e) {
      if (!$e.val()) return true;
      var isUnique = true;
      $e.parents('#content-fields').find('input[data-mt-content-field-unique]').each(function () {
        if (this.id == $e.attr('id')) return;
        if (this.value == $e.val()) {
          isUnique = false;
          return false;
        }
      });
      return isUnique;
    }
  });

  jQuery.mtValidateAddMessages({
    '.date-field': jQuery.mtValidateMessages['.date'],
    '.time-field': jQuery.mtValidateMessages['.time'],
    '[data-mt-content-field-unique]': trans('This field must be unique in this content type')
  });

  jQuery(document).on('after-mt-valid', '.values-option-table input[type=text]', function () {
    var $table = jQuery(this).parents('.values-option-table');
    var ns = $table.data( 'mtValidator' );
    if ( !ns ) return true;
    $table.mtValid({ focus: false });
  });

  jQuery(document).on('after-mt-valid', '.content-field-block div:not(.values-option-table) input, .values-option-table', function () {
    var $block = jQuery(this).parents('.content-field-block');
    var ns = $block.data( 'mtValidator' );
    if ( !ns ) return true;
    $block.mtValid({ focus: false, afterTrigger: false });
  });

  jQuery(document).on('after-mt-valid', 'input[data-mt-content-field-unique]', function () {
    jQuery(this).parents('#content-fields').find('input[data-mt-content-field-unique]').each(function () {
      var $input = jQuery(this);
      var ns = $input.data( 'mtValidator' );
      if ( !ns ) return true;
      $input.mtValid({ focus: false, afterTrigger: false });
    });
  });

  var observer = riot.observable();
  jQuery(document).on('dragstart', '.mt-draggable', function(event) {
    var $this = jQuery(this);
    $this.attr('aria-grabbed', true);
    var fieldType = $this.data('field-type');
    event.originalEvent.dataTransfer.setData('text', fieldType);
    observer.trigger('mtDragStart');
  });

  jQuery(document).on('dragend', '.mt-draggable', function(event) {
    var $this = jQuery(this);
    $this.attr('aria-grabbed', false);
    observer.trigger('mtDragEnd');
  });

  const opts = {
    blog_id: "<mt:var name="blog_id" escape="js">",
    magic_token: "<mt:var name="magic_token" escape="js">",
    return_args: "<mt:var name="return_args" escape="js">",
    id: "<mt:var name="id" escape="js">",
    unique_id: "<mt:var name="unique_id" escape="js">",
    name: "<mt:var name="name" escape="js">",
    description: "<mt:var name="description" escape="js">",
    user_disp_option: "<mt:unless name="id">checked<mt:else><mt:if name="user_disp_option">checked</mt:if></mt:unless>",
    fields: fields,
    types: content_field_types,
    invalid_types: invalid_types,
    observer: observer,
    labelField: "<mt:var name="label_field" escape="js">"
  };

  <mt:if name="config.useriot">
    riot.mount('content-fields', opts);
  <mt:else>
    ContentTypeEditor.mount('content-fields', opts);
  </mt:if>
});
</mt:setvarblock>

<mt:setvarblock name="page_content">

  <div data-is="content-fields"></div>

</mt:setvarblock>

<mt:setvarblock name="related_content">
  <h3><__trans phrase="Available Content Fields"></h3>

  <mt:loop name="content_field_types">
  <div class="mt-draggable" draggable="true" aria-grabbed="false" data-field-type="<mt:var name="type" escape="html">" data-field-label="<mt:var name="label" escape="html">" data-can-data-label="<mt:var name="data_label" escape="html">">
    <div class="col-auto p-0"><mtapp:svgicon id="ic_move" title="<__trans phrase="Content Type">"></div>
    <div class="col p-0"><mt:if name="icon"><mt:var name="icon"></mt:if><mt:var name="label" escape="html"></div>
  </div>
  </mt:loop>

  <mt:if name="unavailable_content_field_types">
  <h3><__trans phrase="Unavailable Content Fields"></h3>
    <mt:loop name="unavailable_content_field_types">
  <div class="mt-collapse">
    <div class="mt-collapse__container">
      <div class="col p-0"><mt:if name="icon"><mt:var name="icon"></mt:if><mt:var name="label" escape="html"></div>
      <div class="col-auto p-0"><a data-bs-toggle="collapse" href="#unavailable-reason-<mt:var name="type" escape="html">" aria-expanded="false" aria-controls="unavailable-reason-<mt:var name="type" escape="html">"><mtapp:svgicon id="ic_collapse" title="<__trans phrase="Reason">" size="secondary"></a></div>
    </div>
    <div class="collapse mt-collapse__content" id="unavailable-reason-<mt:var name="type" escape="html">">
      <div class="row">
        <div class="col">
          <p><mt:var name="warning" escape="html"></p>
        </div>
      </div>
    </div>
  </div>
    </mt:loop>
  </mt:if>
</mt:setvarblock>

<mt:setvar name="main_content_panel_class" value="mt-mainContent--scrollable">
<mt:setvar name="secondary_panel_class" value="mt-secondaryPanel--scrollable">
<mt:include name="layout/default.tmpl">
<mt:var name="layout">
