#!/usr/bin/perl -w

use strict;

use lib 'lib';
use lib 'extlib';
use open qw(:utf8);
use File::Spec;
use Encode;
use MT;
use MT::Util qw(encode_js);

my $js = `cat mt-static/mt.js`;
$js .= `cat mt-static/jquery/jquery.mt.js`;
$js .= `cat mt-static/js/dialog.js`;
$js .= `cat mt-static/js/assetdetail.js`;
$js .= `cat mt-static/js/upload_settings.js`;
$js .= `cat mt-static/js/edit.js`;
$js .= `cat mt-static/js/archetype_editor.js`;
$js .= `cat mt-static/js/cms.js`;

$js .= `cat mt-static/js/contenttype/tag/*.tag`;
$js .= `cat mt-static/js/listing/tag/*.tag`;
$js .= `cat mt-static/js/mt/util.js`;
$js .= `cat mt-static/js/tc/mixer/display.js`;
$js .= `cat mt-static/plugins/BlockEditor/lib/js/blockeditor_field.js`;
$js
    .= `cat mt-static/plugins/BlockEditor/lib/js/blockeditor_field_manager.js`;
$js .= `cat mt-static/plugins/BlockEditor/lib/js/fields/embed.js`;
$js .= `cat mt-static/plugins/BlockEditor/lib/js/fields/header.js`;
$js .= `cat mt-static/plugins/BlockEditor/lib/js/fields/horizon.js`;
$js .= `cat mt-static/plugins/BlockEditor/lib/js/fields/image.js`;
$js .= `cat mt-static/plugins/BlockEditor/lib/js/fields/text.js`;
$js .= `cat mt-static/plugins/BlockEditor/lib/js/jquery.blockeditor.js`;
$js .= `cat mt-static/plugins/BlockEditor/lib/js/modal_window.js`;
$js .= `cat mt-static/plugins/FormattedTextForTinyMCE/extension.js`;
$js .= `cat mt-static/plugins/TinyMCE/tiny_mce/plugins/mt/langs/plugin.js`;
$js .= `cat mt-static/plugins/TinyMCE/tiny_mce/plugins/mt/plugin.js`;
$js
    .= `cat mt-static/plugins/TinyMCE/tiny_mce/plugins/mt_fullscreen/langs/plugin.js`;
$js .= `cat mt-static/plugins/TinyMCE/tiny_mce/plugins/mt/langs/plugin.js`;
$js
    .= `cat mt-static/plugins/TinyMCE/tiny_mce/plugins/mt_fullscreen/langs/plugin.js`;
$js .= `cat plugins/BlockEditor/tmpl/cms/dialog/asset_modal.tmpl`;
$js
    .= `cat plugins/BlockEditor/tmpl/cms/dialog/include/asset_upload_panel.tmpl`;
$js
    .= `cat plugins/BlockEditor/tmpl/cms/field_html/field_html_multi_line_text.tmpl`;
$js .= `cat plugins/BlockEditor/tmpl/cms/include/async_asset_list.tmpl`;
$js .= `cat plugins/FormattedText/tmpl/cms/edit_formatted_text.tmpl`;
$js .= `cat tmpl/cms/edit_commenter.tmpl`;
$js .= `cat tmpl/cms/edit_content_data.tmpl`;
$js .= `cat tmpl/cms/edit_content_type.tmpl`;
$js .= `cat tmpl/cms/edit_entry.tmpl`;
$js .= `cat tmpl/cms/edit_template.tmpl`;
$js .= `cat tmpl/cms/field_html/field_html_asset.tmpl`;
$js .= `cat tmpl/cms/field_html/field_html_categories.tmpl`;
$js .= `cat tmpl/cms/field_html/field_html_content_type.tmpl`;
$js .= `cat tmpl/cms/field_html/field_html_multi_line_text.tmpl`;
$js .= `cat tmpl/cms/include/asset_upload.tmpl`;
$js .= `cat tmpl/cms/include/async_asset_list.tmpl`;
$js .= `cat tmpl/cms/include/async_asset_upload.tmpl`;
$js .= `cat tmpl/cms/include/category_selector.tmpl`;
$js .= `cat tmpl/cms/include/content_data_list.tmpl`;
$js .= `cat tmpl/cms/list_category.tmpl`;
$js .= `cat tmpl/cms/listing/tag_list_header.tmpl`;

my $addon_path = File::Spec->catdir('addons');
local *DH;
my @files;
my @addons;
if ( opendir DH, $addon_path ) {
    my @p = readdir DH;
    foreach my $p (@p) {
        next if $p eq '.' || $p eq '..';
        my $full_path = File::Spec->catdir( $addon_path, $p );
        if ( -d $full_path ) {
            if ( $p =~ m/^(.+)\.(\w+)$/ ) {
                my $label = $1;
                my $id    = lc $1;
                my $type  = $2;
                next if $type ne 'pack';
                if ( open my $fh,
                    '<',
                    File::Spec->catfile( $full_path, 'make_js_templates' ) )
                {
                    while (<$fh>) {
                        chomp $_;
                        push @files, $_;
                    }
                    close $fh;
                    push @addons, $label;
                }
            }
        }
    }
    closedir DH;
}

$js .= `cat $_` foreach @files;

foreach my $lang (qw(en_us ja de nl fr es)) {
    eval 'require MT::L10N::' . $lang
        or die "failed to find package MT::L10N::$lang";

    my $lex = eval '\%{ MT::L10N::' . $lang . '::Lexicon }' || {};

    foreach my $addon (@addons) {
        eval {
            unshift @INC, "addons/$addon.pack/lib";
            require "addons/$addon.pack/lib/MT/$addon/L10N/$lang.pm";
        };
        next if $@;
        my $conv;
        $conv = eval '\%{MT::' . $addon . '::L10N::' . $lang . '::Lexicon}';
        if (%$conv) {
            $lex = { %$lex, %$conv, };
        }
    }

    my $enc_js = Encode::encode_utf8($js);
    $enc_js =~ s/\\'/\t\t/g;
    my %lexicon;
    while ( $enc_js =~ m/trans\(\s*(["'])([^\1|\\\1]+?)\1/g ) {
        my $str = $2;
        $str =~ s/\t\t/'/g;
        my $local = $lex->{$str} ? Encode::encode_utf8( $lex->{$str} ) : $str;
        $str   = encode_js($str);
        $local = encode_js($local);
        next if $str eq $local;
        $str = Encode::decode_utf8($str);
        $local = Encode::decode_utf8($local) unless Encode::is_utf8($local);
        $lexicon{$str} = $local;
    }

    open( my $FOUT, ">", "./mt-static/mt_$lang.js" )
        or die "failed to open mt-static/mt_$lang.js for writing";

    binmode $FOUT, ":utf8";
    print $FOUT
        "/* Movable Type language lexicon for $lang localization. */\n\n";

    for my $text ( keys %lexicon ) {
        print $FOUT "Lexicon['$text'] = '$lexicon{$text}';\n";
    }
    close $FOUT;
}
